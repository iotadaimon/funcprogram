(load "complex-rectangular.scm")
(load "complex-polar.scm")

(define (install-complex-package)
  ;; Import dependencies
  (install-rectangular-package)
  (install-polar-package)

  ;; Internal functions
  (define (rectangular? z)
    (eq? (type-tag z) 'rectangular))
  (define (polar? z)
    (eq? (type-tag z) 'polar))
  
  (define (real-part z)
    (cond ((rectangular? z)
           ((get 'real-part '(rectangular)) (contents z))) ; Change here
          ((polar? z)
           ((get 'real-part '(polar)) (contents z)))
	  (else (error "Unknown type -- REAL-PART" z))))
  (define (imag-part z)
    (cond ((rectangular? z)
           ((get 'imag-part '(rectangular)) (contents z)))
          ((polar? z)
           ((get 'imag-part '(polar)) (contents z)))
          (else (error "Unknown type -- IMAG-PART" z))))
  (define (magnitude z)
    (cond ((rectangular? z)
           ((get 'magnitude '(rectangular)) (contents z)))
          ((polar? z)
           ((get 'magnitude '(polar)) (contents z)))
          (else (error "Unknown type -- MAGNITUDE" z))))
  (define (angle z)
    (cond ((rectangular? z)
           ((get 'angle '(rectangular)) (contents z)))
          ((polar? z)
           ((get 'angle '(polar)) (contents z)))
          (else (error "Unknown type -- ANGLE" z))))

  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag '(rectangular)) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang '(polar)) r a))
  
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))
  (define (check-zero-complex x)
    (and (zero? (real-part x))
	 (zero? (imag-part x))))

  ;; Interface to other parts
  (define (tag z) (attach-tag 'complex z))
  
  (put 'add '(complex complex)
        (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
        (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
        (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'check-zero? '(complex) check-zero-complex)
  (put 'make-from-real-imag '(complex)
        (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang '(complex)
        (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (make-from-real-imag x y) ((get 'make-from-real-imag '(complex)) x y))
(define (make-from-mag-ang x y) ((get 'make-from-mag-ang '(complex)) x y))
